// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
// 
// Get dependencies first
//= require ./external/handlebars.js
//= require ./external/lodash.js
//= require ./external/ember.js
//= require ./external/ember-data.js
//= require handlebars_helpers
//= require ./external/typeahead.js
//= require ./external/bootstrap-tag.js
//= require ./external/jquery.isotope.js
//= require ./external/moment/moment.js
//= require geo
//
// Instantiate the application
// 
//= require_self
//= require router.js
//= require_tree ./alooksie/templates
//= require_tree ./alooksie/models
//= require_tree ./alooksie/routes
//= require ./alooksie/controllers/object_controller.js
//= require_tree ./alooksie/controllers
//= require_tree ./alooksie/views
//= require_tree ./alooksie/helpers
//= require store


App = Ember.Application.create({
	rootElement: '#root',
	LOG_TRANSITIONS: true,
	ready: function() {
		// Log available templates
		console.log(Ember.TEMPLATES);
	}
});

App.Store = DS.Store.extend({
	revision: 13,
	adapter: DS.RESTAdapter.create()	
});


App.ApplicationAdapter = DS.ActiveModelAdapter.extend();

//Get the current user, inject into controller
Ember.Application.initializer({
  name: 'currentUser',
  initialize: function(container) {

    store = container.lookup('store:main');
    var userID = $('meta[name="current-user"]').attr('content');
	if (userID) {
		controller = container.lookup('controller:currentUser').set('isSignedIn', true);
		controller = container.lookup('controller:currentUser').set('id', userID);
	} else {
		controller = container.lookup('controller:currentUser').set('isSignedIn', false);
  	}
  }
});


// Hack to fix the Facebook redirect bullshit
if(window.location.hash == "#_=_") {
	window.location.hash = '';
}
App.ready = function () {
	console.log(Ember.keys(Ember.TEMPLATES));
};


$(document).ready(function() {
	var messages = $('.messages');
	
	messages.isotope({
		animation: 'best-available',
		masonry: {
			gutterWidth: 10
		}
	});

	//Embeds the CSRF token into the header, required to pass forgery check
	var token = $('meta[name="csrf-token"]').attr('content');
	$.ajaxPrefilter(function(options, originalOptions, xhr) {
  		return xhr.setRequestHeader('X-CSRF-Token', token);
	});

});
